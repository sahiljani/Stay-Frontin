{% comment %}
    Image (40%) + Overlapping Product Panel (60%) – 3-up carousel
{% endcomment %}
{%- assign coll = section.settings.collection -%}
{%- assign max_items = section.settings.max_items | default: 12 -%}

<style>
  #shopify-section-{{ section.id }} .io-wrap{
    --overlap: {{ section.settings.overlap | default: 5 }}%;
    --radius: {{ section.settings.radius | default: 18 }}px;
    --panel-bg: {{ section.settings.panel_bg | default: '#ffffff' }};
    --section-bg: {{ section.settings.section_bg | default: '#f6f2ef' }};
    --card-radius: 14px;
    --border: 1px solid rgba(0,0,0,.06);
    background: var(--section-bg);
    padding: clamp(22px, 3vw, 36px);
  }

  /* 40 / 60 split */
  #shopify-section-{{ section.id }} .io-grid{
    display:grid;
    grid-template-columns: 35% 65%;
    align-items: center!important;    
    position: relative;
  }

  @media (max-width: 990px){
    #shopify-section-{{ section.id }} .io-grid{
      grid-template-columns: 1fr;
    }
  }

  /* Desktop: hard height */
  @media (min-width: 991px){
    #shopify-section-{{ section.id }} .io-image{
      border-radius: var(--radius);
      overflow: hidden;
      height: 550px; /* <- set the exact height you want */
    }
  }

  /* Mobile: let it auto or use a ratio so it doesn’t look squashed */
  @media (max-width: 990px){
    #shopify-section-{{ section.id }} .io-image{
      aspect-ratio: 4 / 5;  /* or set a smaller fixed height if you prefer */
      height: auto;
    }
  }

  #shopify-section-{{ section.id }} .io-image img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* Right panel (overlaps ~5%) */
  #shopify-section-{{ section.id }} .io-panel{
    padding: clamp(18px, 2vw, 28px);
    position: relative;
    z-index: 2;
  }

  @media (min-width: 991px){
    #shopify-section-{{ section.id }} .io-panel{
      margin-left: calc(-1 * var(--overlap));
    }
  }

  /* Header */
  #shopify-section-{{ section.id }} .io-head{
    position: relative;
    padding: 4px 48px 18px 48px;
    text-align:center;
  }

  #shopify-section-{{ section.id }} .io-title{
    margin:0; letter-spacing:.01em;
    font-size: clamp(22px, 2.7vw, 36px);
    line-height:1.2;
  }

  #shopify-section-{{ section.id }} .io-nav{
    position:absolute; top:0; right:0; display:flex; gap:8px;
  }

  #shopify-section-{{ section.id }} .io-btn{
    width:38px; height:38px; border-radius:999px; border:1px solid rgba(0,0,0,.12);
    display:grid; place-items:center; background:#fff; cursor:pointer;
  }

  /* 3-up carousel */
  #shopify-section-{{ section.id }} .io-window{ overflow:hidden; }
  #shopify-section-{{ section.id }} .io-track{
    display:flex; transition:transform .45s ease;
    cursor: grab;
    user-select: none;
  }

  #shopify-section-{{ section.id }} .io-track.dragging {
    cursor: grabbing;
  }

  #shopify-section-{{ section.id }} .io-card{
    flex: 0 0 calc(100% / 3);
    padding: 0 clamp(8px, 1vw, 12px);
    box-sizing: border-box;
  }

  @media (max-width: 990px){
    #shopify-section-{{ section.id }} .io-card{ flex: 0 0 80%; }
  }

  #shopify-section-{{ section.id }} .io-card-inner{
    border: var(--border); border-radius: var(--card-radius); overflow:hidden; background:#fff;
  }

  #shopify-section-{{ section.id }} .io-media{
    position:relative; background:#f4f4f4;
  }

  #shopify-section-{{ section.id }} .io-media img{ width:100%; aspect-ratio: 1/1; object-fit:contain; display:block; }

  /* SALE pill + % OFF chip */
  #shopify-section-{{ section.id }} .pill{
    position:absolute; top:12px; left:12px;
    background:#ff3ea5; color:#fff; font-weight:700;
    padding:.35rem .6rem; border-radius:999px; font-size:12px;
  }

  #shopify-section-{{ section.id }} .chip{
    position:absolute; bottom:12px; left:12px;
    background:#ff6ea1; color:#fff; font-weight:700;
    padding:.35rem .6rem; border-radius:999px; font-size:12px;
  }

  #shopify-section-{{ section.id }} .io-body{ padding: 12px 14px 16px; }
  #shopify-section-{{ section.id }} .vendor{
    font-size:12px; color:#999; letter-spacing:.08em; text-transform:uppercase;
  }

  #shopify-section-{{ section.id }} .title{
    font-size:14px; color:#111; line-height:1.35; margin:.35rem 0 .45rem 0;
    min-height: 2.6em;
  }

  #shopify-section-{{ section.id }} .price{
    display:flex; gap:8px; align-items:baseline;
  }

  #shopify-section-{{ section.id }} .price .now{ font-weight:700; }
  #shopify-section-{{ section.id }} .price s{ color:#888; }

  #shopify-section-{{ section.id }} .io-track {
    will-change: transform;
    touch-action: pan-y pinch-zoom;
    transform: translate3d(0, 0, 0);
  }

  #shopify-section-{{ section.id }} .io-track * {
    -webkit-user-drag: none;
    -webkit-touch-callout: none;
    user-select: none;
  }
</style>

<section class="io-wrap">
  <div class="io-grid">
    <!-- 40% image -->
    <div class="io-image">
      {%- if section.settings.left_image != blank -%}
        {{ section.settings.left_image | image_url: width: 1600 | image_tag: loading: 'lazy', alt: section.settings.left_image.alt }}
      {%- else -%}
        {{ 'image' | placeholder_svg_tag }}
      {%- endif -%}
    </div>

    <!-- 60% panel -->
    <div class="io-panel">
      <div class="io-head">
        <h2 class="io-title">{{ section.settings.heading }}</h2>
        <div class="io-nav" aria-hidden="true">
          <button class="io-btn" data-dir="-1" aria-label="Previous">‹</button>
          <button class="io-btn" data-dir="1" aria-label="Next">›</button>
        </div>
      </div>

      <div class="io-window">
        <div class="io-track" id="track-{{ section.id }}">
          {%- if coll and coll.products_count > 0 -%}
            {%- for product in coll.products limit: max_items -%}
                {%- comment -%} Compute discount flags safely in Liquid {%- endcomment -%}
                {%- assign has_discount = false -%}
                {%- assign pct = 0 -%}
                {%- if product.compare_at_price_max and product.compare_at_price_max > product.price -%}
                    {%- assign diff = product.compare_at_price_max | minus: product.price -%}
                    {%- assign pct  = diff | times: 100 | divided_by: product.compare_at_price_max -%}
                    {%- assign has_discount = true -%}
                {%- endif -%}

                <a class="io-card" href="{{ product.url }}">
                    <div class="io-card-inner">
                    <div class="io-media">
                        {% if product.featured_media %}
                        {{ product.featured_media | image_url: width: 650 | image_tag: loading: 'lazy', alt: product.title }}
                        {% else %}
                        <div style="aspect-ratio:1/1;background:#f2f2f2;"></div>
                        {% endif %}
                        {%- if has_discount -%}
                        <span class="pill">SALE</span>
                        <span class="chip">{{ pct | round }}% OFF</span>
                        {%- endif -%}
                    </div>
                    <div class="io-body">
                        <div class="vendor">{{ product.vendor }}</div>
                        <h3 class="title">{{ product.title }}</h3>
                        <div class="price">
                        <span class="now">{{ product.price | money }}</span>
                        {%- if has_discount -%}
                        <s>{{ product.compare_at_price_max | money }}</s>
                        {%- endif -%}
                        </div>
                    </div>
                    </div>
                </a>
            {%- endfor -%}
          {%- else -%}
            <div>No products available.</div>
          {%- endif -%}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
(function(){
  const track = document.getElementById('track-{{ section.id }}');
  if(!track) return;

  const btns = track.closest('.io-panel').querySelectorAll('[data-dir]');
  const cards = track.querySelectorAll('.io-card');
  const visible = window.matchMedia('(max-width:990px)').matches ? 1 : 3;
  
  let isDragging = false;
  let startX;
  let scrollLeft;
  let currentX;
  let initialX;
  let xOffset = 0;
  let dragStartTime;
  let dragDistance = 0;

  // Initialize the slider
  function init() {
    xOffset = 0;
    track.style.transform = `translateX(0)`;
    addEventListeners();
  }

  // Get the x position for the event
  function getXPosition(event) {
    return event.type.includes('mouse') ? event.pageX : event.touches[0].pageX;
  }

  // Handle the drag start event
  function handleDragStart(e) {
    if (e.target.closest('a')) {
      e.target.closest('a').onclick = (clickEvent) => clickEvent.preventDefault();
    }

    isDragging = true;
    dragStartTime = Date.now();
    startX = getXPosition(e);
    initialX = xOffset;
    scrollLeft = track.scrollLeft;
    currentX = startX - xOffset;
    dragDistance = 0;

    track.classList.add('dragging');
    track.style.transition = 'none';
    track.style.cursor = 'grabbing';

    document.addEventListener('mousemove', handleDragMove);
    document.addEventListener('touchmove', handleDragMove, { passive: false });
    document.addEventListener('mouseup', handleDragEnd);
    document.addEventListener('touchend', handleDragEnd);
  }

  // Handle the drag move event
  function handleDragMove(e) {
    if (!isDragging) return;
    e.preventDefault();

    const x = getXPosition(e);
    const step = 100 / visible;
    const walk = (startX - x) / track.offsetWidth * 100;
    
    dragDistance = x - startX;
    xOffset = initialX - walk;

    // Add resistance at edges
    const maxScroll = -(cards.length - visible) * step;
    if (xOffset > 0) {
      xOffset = xOffset / 3; // resistance at left edge
    } else if (xOffset < maxScroll) {
      const overscroll = xOffset - maxScroll;
      xOffset = maxScroll + (overscroll / 3); // resistance at right edge
    }

    track.style.transform = `translateX(${xOffset}%)`;
  }

  // Handle the drag end event
  function handleDragEnd(e) {
    if (!isDragging) return;
    isDragging = false;

    const dragEndTime = Date.now();
    const dragDuration = dragEndTime - dragStartTime;
    const velocity = Math.abs(dragDistance / dragDuration);
    const step = 100 / visible;
    
    // Calculate momentum
    let momentum = 0;
    if (velocity > 0.5) {
      momentum = Math.sign(dragDistance) * Math.min(2, Math.floor(velocity * 2));
    }

    // Snap to nearest position
    let snapPoint = Math.round(-xOffset / step);
    snapPoint = Math.max(0, Math.min(cards.length - visible, snapPoint - momentum));
    
    const targetOffset = -snapPoint * step;

    // Animate to final position
    track.style.transition = 'transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
    xOffset = targetOffset;
    track.style.transform = `translateX(${targetOffset}%)`;

    // Cleanup
    track.classList.remove('dragging');
    track.style.cursor = 'grab';
    
    setTimeout(() => {
      track.style.transition = '';
    }, 300);

    document.removeEventListener('mousemove', handleDragMove);
    document.removeEventListener('touchmove', handleDragMove);
    document.removeEventListener('mouseup', handleDragEnd);
    document.removeEventListener('touchend', handleDragEnd);
  }

  // Add event listeners to the track
  function addEventListeners() {
    track.addEventListener('mousedown', handleDragStart);
    track.addEventListener('touchstart', handleDragStart, { passive: true });

    // Button navigation (next and previous)
    btns.forEach(btn => {
      btn.addEventListener('click', () => {
        const dir = parseInt(btn.dataset.dir, 10);
        const step = 100 / visible;
        const currentPos = -xOffset / step;
        const targetPos = Math.max(0, Math.min(cards.length - visible, currentPos + dir));
        
        track.style.transition = 'transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        xOffset = -targetPos * step;
        track.style.transform = `translateX(${xOffset}%)`;
        
        setTimeout(() => {
          track.style.transition = '';
        }, 300);
      });
    });

    // Handle window resize to reset the dragging
    window.addEventListener('resize', () => {
      track.style.transition = 'none';
      init();
    });
  }

  // Initialize the slider on page load
  init();
})();
</script>
