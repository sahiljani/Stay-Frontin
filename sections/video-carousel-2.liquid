{% comment %}
  Video Carousel Section
  Displays a carousel of videos with custom controls
{% endcomment %}

<style>
  .video-carousel-wrapper {
    position: relative;
    width: 100%;
    overflow: hidden;
    padding: 40px 0;
  }

  .video-carousel-container {
    display: flex;
    gap: 20px;
    transition: transform 0.5s ease;
    padding: 0 60px;
  }

  .video-carousel-item {
    min-width: calc(33.333% - 14px);
    position: relative;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: transform 0.3s ease;
  }

  @media (max-width: 1024px) {
    .video-carousel-item {
      min-width: calc(50% - 10px);
    }
  }

  @media (max-width: 768px) {
    .video-carousel-item {
      min-width: calc(100% - 20px);
    }
    .video-carousel-container {
      padding: 0 40px;
    }
  }

  .video-carousel-item:hover {
    transform: scale(1.02);
  }

  .video-carousel-item.active {
    transform: scale(1.05);
    z-index: 10;
  }

  .video-wrapper {
    position: relative;
    width: 100%;
    padding-bottom: 177.78%; /* 9:16 aspect ratio */
    background: #000;
  }

  .video-wrapper video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .video-controls {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    gap: 8px;
    z-index: 20;
  }

  .video-control-btn {
    background: rgba(0, 0, 0, 0.6);
    border: none;
    color: white;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s ease;
  }

  .video-control-btn:hover {
    background: rgba(0, 0, 0, 0.8);
  }

  .video-title {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
    color: white;
    padding: 40px 15px 15px;
    font-size: 16px;
    font-weight: 500;
  }

  .video-view-btn {
    position: absolute;
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(255, 255, 255, 0.95);
    color: #000;
    border: none;
    padding: 12px 40px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 600;
    font-size: 16px;
    transition: background 0.3s ease;
    z-index: 15;
  }

  .video-view-btn:hover {
    background: #fff;
  }

  .carousel-nav-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
    transition: background 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .carousel-nav-btn:hover {
    background: #fff;
  }

  .carousel-nav-btn.prev {
    left: 10px;
  }

  .carousel-nav-btn.next {
    right: 10px;
  }

  .carousel-nav-btn svg {
    width: 24px;
    height: 24px;
  }

  .video-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.95);
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .video-modal.active {
    display: flex;
  }

  .video-modal-content {
    position: relative;
    width: 90%;
    max-width: 600px;
    aspect-ratio: 9/16;
  }

  .video-modal-content video {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .modal-close-btn {
    position: absolute;
    top: -40px;
    right: 0;
    background: none;
    border: none;
    color: white;
    font-size: 32px;
    cursor: pointer;
    width: 40px;
    height: 40px;
  }
</style>

<div class="video-carousel-wrapper" id="video-carousel-{{ section.id }}">
  <button class="carousel-nav-btn prev" onclick="moveCarousel('{{ section.id }}', -1)">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <polyline points="15 18 9 12 15 6"></polyline>
    </svg>
  </button>

  <div class="video-carousel-container" id="carousel-container-{{ section.id }}">
    {% for block in section.blocks %}
      <div class="video-carousel-item" data-index="{{ forloop.index0 }}">
        <div class="video-wrapper">
          <video 
            id="video-{{ section.id }}-{{ forloop.index0 }}"
            {% if block.settings.video_url != blank %}
              src="{{ block.settings.video_url }}"
            {% elsif block.settings.video_file != blank %}
              src="{{ block.settings.video_file | file_url }}"
            {% endif %}
            playsinline
            {% if block.settings.loop %}loop{% endif %}
            {% if block.settings.muted %}muted{% endif %}
            {% if block.settings.autoplay %}autoplay{% endif %}
          ></video>

          <div class="video-controls">
            <button class="video-control-btn" onclick="toggleMute('{{ section.id }}', {{ forloop.index0 }})">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
                <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02z"/>
              </svg>
            </button>
            <button class="video-control-btn" onclick="toggleFullscreen('{{ section.id }}', {{ forloop.index0 }})">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2">
                <path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"/>
              </svg>
            </button>
          </div>

          {% if block.settings.title != blank %}
            <div class="video-title">{{ block.settings.title }}</div>
          {% endif %}

          {% if block.settings.show_view_button %}
            <button class="video-view-btn" onclick="openVideoModal('{{ section.id }}', {{ forloop.index0 }})">
              View
            </button>
          {% endif %}
        </div>
      </div>
    {% endfor %}
  </div>

  <button class="carousel-nav-btn next" onclick="moveCarousel('{{ section.id }}', 1)">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <polyline points="9 18 15 12 9 6"></polyline>
    </svg>
  </button>
</div>

<div class="video-modal" id="video-modal-{{ section.id }}">
  <div class="video-modal-content">
    <button class="modal-close-btn" onclick="closeVideoModal('{{ section.id }}')">Ã—</button>
    <video id="modal-video-{{ section.id }}" controls playsinline></video>
  </div>
</div>

<script>
  let currentIndex = 0;
  const carouselData = {};

  function initCarousel(sectionId) {
    if (!carouselData[sectionId]) {
      carouselData[sectionId] = { currentIndex: 0 };
    }
  }

  function moveCarousel(sectionId, direction) {
    initCarousel(sectionId);
    const container = document.getElementById('carousel-container-' + sectionId);
    const items = container.querySelectorAll('.video-carousel-item');
    const containerWidth = container.offsetWidth;
    const itemWidth = items[0].offsetWidth + 20;
    
    carouselData[sectionId].currentIndex += direction;
    
    if (carouselData[sectionId].currentIndex < 0) {
      carouselData[sectionId].currentIndex = 0;
    }
    if (carouselData[sectionId].currentIndex > items.length - 3) {
      carouselData[sectionId].currentIndex = Math.max(0, items.length - 3);
    }
    
    const translateX = -carouselData[sectionId].currentIndex * itemWidth;
    container.style.transform = `translateX(${translateX}px)`;

    // Update active state
    items.forEach((item, index) => {
      item.classList.remove('active');
      if (index === carouselData[sectionId].currentIndex + 1) {
        item.classList.add('active');
      }
    });
  }

  function toggleMute(sectionId, videoIndex) {
    const video = document.getElementById(`video-${sectionId}-${videoIndex}`);
    video.muted = !video.muted;
  }

  function toggleFullscreen(sectionId, videoIndex) {
    const video = document.getElementById(`video-${sectionId}-${videoIndex}`);
    if (video.requestFullscreen) {
      video.requestFullscreen();
    } else if (video.webkitRequestFullscreen) {
      video.webkitRequestFullscreen();
    } else if (video.msRequestFullscreen) {
      video.msRequestFullscreen();
    }
  }

  function openVideoModal(sectionId, videoIndex) {
    const modal = document.getElementById(`video-modal-${sectionId}`);
    const modalVideo = document.getElementById(`modal-video-${sectionId}`);
    const sourceVideo = document.getElementById(`video-${sectionId}-${videoIndex}`);
    
    modalVideo.src = sourceVideo.src;
    modal.classList.add('active');
    modalVideo.play();
    
    // Pause the source video
    sourceVideo.pause();
  }

  function closeVideoModal(sectionId) {
    const modal = document.getElementById(`video-modal-${sectionId}`);
    const modalVideo = document.getElementById(`modal-video-${sectionId}`);
    
    modal.classList.remove('active');
    modalVideo.pause();
    modalVideo.src = '';
  }

  // Close modal on outside click
  document.addEventListener('DOMContentLoaded', function() {
    const modals = document.querySelectorAll('.video-modal');
    modals.forEach(modal => {
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          const sectionId = modal.id.replace('video-modal-', '');
          closeVideoModal(sectionId);
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "Video Carousel",
  "settings": [],
  "blocks": [
    {
      "type": "video",
      "name": "Video",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Video Title",
          "default": "Video Title"
        },
        {
          "type": "url",
          "id": "video_url",
          "label": "Video URL",
          "info": "Add external video URL (YouTube, Vimeo, or direct .mp4 link)"
        },
        {
          "type": "video",
          "id": "video_file",
          "label": "Upload Video",
          "info": "Upload video file directly (recommended for best performance)"
        },
        {
          "type": "checkbox",
          "id": "autoplay",
          "label": "Autoplay",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "loop",
          "label": "Loop Video",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "muted",
          "label": "Muted by Default",
          "default": true,
          "info": "Videos must be muted for autoplay to work"
        },
        {
          "type": "checkbox",
          "id": "show_view_button",
          "label": "Show View Button",
          "default": true
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Video Carousel",
      "blocks": [
        {
          "type": "video",
          "settings": {
            "title": "Crimson Red Print"
          }
        },
        {
          "type": "video",
          "settings": {
            "title": "Green Elegance"
          }
        },
        {
          "type": "video",
          "settings": {
            "title": "Blue Floral"
          }
        }
      ]
    }
  ]
}
{% endschema %}