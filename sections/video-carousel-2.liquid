{% comment %}
  Video Carousel Section - Clean Version Without Any Buttons
{% endcomment %}

<style>
  .video-carousel-section {
    position: relative;
    width: 100%;
    min-height: 600px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 60px 20px;
    background: {{ section.settings.background_color }};
  }

  .video-carousel-track {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: -100px;
    position: relative;
    width: 100%;
    max-width: 1400px;
    perspective: 1200px;
  }

  .video-card {
    position: relative;
    width: 320px;
    height: 550px;
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
    flex-shrink: 0;
    cursor: pointer;
  }

  /* Side cards styling */
  .video-card.side {
    transform: scale(0.85) translateZ(-100px);
    opacity: 0.6;
    filter: brightness(0.7);
    z-index: 1;
  }

  .video-card.side-left {
    transform: scale(0.85) translateX(50px) translateZ(-100px) rotateY(5deg);
  }

  .video-card.side-right {
    transform: scale(0.85) translateX(-50px) translateZ(-100px) rotateY(-5deg);
  }

  /* Center/Active card styling */
  .video-card.center {
    transform: scale(1) translateZ(0);
    opacity: 1;
    filter: brightness(1);
    z-index: 10;
  }

  /* Hidden cards */
  .video-card.hidden {
    opacity: 0;
    transform: scale(0.7) translateZ(-200px);
    pointer-events: none;
  }

  .video-card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    background: #000;
  }

  .video-card video,
  .video-card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Video title overlay */
  .video-title-overlay {
    position: absolute;
    top: 12px;
    left: 12px;
    background: rgba(0, 0, 0, 0.6);
    color: white;
    padding: 8px 14px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    backdrop-filter: blur(10px);
    z-index: 20;
  }

  /* Navigation arrows */
  .carousel-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: white;
    border: none;
    width: 56px;
    height: 56px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.2s;
  }

  .carousel-arrow:hover {
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
  }

  .carousel-arrow.prev {
    left: 30px;
  }

  .carousel-arrow.next {
    right: 30px;
  }

  .carousel-arrow svg {
    width: 24px;
    height: 24px;
    stroke: #333;
    stroke-width: 2.5;
  }

  @media (max-width: 768px) {
    .video-card {
      width: 280px;
      height: 480px;
    }
    
    .carousel-arrow {
      width: 44px;
      height: 44px;
    }

    .carousel-arrow.prev {
      left: 10px;
    }

    .carousel-arrow.next {
      right: 10px;
    }
  }
</style>

<div class="video-carousel-section" id="section-{{ section.id }}">
  <button class="carousel-arrow prev" aria-label="Previous video">
    <svg viewBox="0 0 24 24" fill="none">
      <polyline points="15 18 9 12 15 6"></polyline>
    </svg>
  </button>

  <div class="video-carousel-track" id="track-{{ section.id }}">
    {% for block in section.blocks %}
      <div class="video-card {% if forloop.index == 1 %}side-left{% elsif forloop.index == 2 %}center{% elsif forloop.index == 3 %}side-right{% else %}hidden{% endif %}" 
           data-index="{{ forloop.index0 }}">
        <div class="video-card-inner">
          {% if block.settings.video_file != blank %}
            <video 
              loop 
              muted 
              playsinline
              {% if forloop.index == 2 %}autoplay{% endif %}
              id="video-{{ section.id }}-{{ forloop.index0 }}">
              <source src="{{ block.settings.video_file }}" type="video/mp4">
            </video>
          {% elsif block.settings.video_url != blank %}
            <iframe 
              src="{{ block.settings.video_url }}" 
              frameborder="0" 
              allow="{% if forloop.index == 2 %}autoplay; {% endif %}fullscreen" 
              style="width:100%;height:100%;">
            </iframe>
          {% elsif block.settings.poster_image != blank %}
            <img src="{{ block.settings.poster_image | image_url: width: 640 }}" alt="{{ block.settings.title }}">
          {% endif %}

          {% if block.settings.title != blank %}
            <div class="video-title-overlay">{{ block.settings.title }}</div>
          {% endif %}
        </div>
      </div>
    {% endfor %}
  </div>

  <button class="carousel-arrow next" aria-label="Next video">
    <svg viewBox="0 0 24 24" fill="none">
      <polyline points="9 18 15 12 9 6"></polyline>
    </svg>
  </button>
</div>

<script>
(function() {
  var sectionId = '{{ section.id }}';
  var currentIndex = 1;
  var totalCards = {{ section.blocks.size }};
  var isTransitioning = false;

  function updateCarousel() {
    var track = document.getElementById('track-' + sectionId);
    if (!track) return;
    
    var cards = track.querySelectorAll('.video-card');
    
    cards.forEach(function(card, i) {
      // Remove all classes first
      card.className = 'video-card';
      
      // Pause all videos
      var video = card.querySelector('video');
      if (video) {
        video.pause();
      }
      
      // Apply appropriate class based on position
      if (i === currentIndex) {
        card.className = 'video-card center';
        // Play center video
        if (video) {
          video.play().catch(function(err) {
            console.log('Autoplay failed:', err);
          });
        }
      } else if (i === (currentIndex - 1 + totalCards) % totalCards) {
        card.className = 'video-card side-left';
      } else if (i === (currentIndex + 1) % totalCards) {
        card.className = 'video-card side-right';
      } else {
        card.className = 'video-card hidden';
      }
    });
  }

  function changeSlide(direction) {
    if (isTransitioning) return;
    isTransitioning = true;
    
    currentIndex += direction;
    
    if (currentIndex < 0) {
      currentIndex = totalCards - 1;
    }
    if (currentIndex >= totalCards) {
      currentIndex = 0;
    }
    
    updateCarousel();
    
    setTimeout(function() {
      isTransitioning = false;
    }, 500);
  }

  function initializeCarousel() {
    var section = document.getElementById('section-' + sectionId);
    if (!section) return;

    // Navigation arrows
    var prevBtn = section.querySelector('.carousel-arrow.prev');
    var nextBtn = section.querySelector('.carousel-arrow.next');
    
    if (prevBtn) {
      prevBtn.addEventListener('click', function(e) {
        e.preventDefault();
        changeSlide(-1);
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', function(e) {
        e.preventDefault();
        changeSlide(1);
      });
    }

    // Click on cards to navigate
    var cards = section.querySelectorAll('.video-card');
    cards.forEach(function(card, index) {
      card.addEventListener('click', function(e) {
        if (card.classList.contains('side-left')) {
          changeSlide(-1);
        } else if (card.classList.contains('side-right')) {
          changeSlide(1);
        }
      });
    });

    // Touch/swipe support
    var touchStartX = 0;
    var touchEndX = 0;
    var track = document.getElementById('track-' + sectionId);
    
    if (track) {
      track.addEventListener('touchstart', function(e) {
        touchStartX = e.changedTouches[0].screenX;
      }, { passive: true });
      
      track.addEventListener('touchend', function(e) {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      }, { passive: true });
    }
    
    function handleSwipe() {
      var swipeThreshold = 50;
      if (touchEndX < touchStartX - swipeThreshold) {
        changeSlide(1);
      }
      if (touchEndX > touchStartX + swipeThreshold) {
        changeSlide(-1);
      }
    }

    // Initialize
    updateCarousel();
  }

  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCarousel);
  } else {
    initializeCarousel();
  }
})();
</script>

{% schema %}
{
  "name": "Video Carousel",
  "settings": [
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#000000"
    }
  ],
  "blocks": [
    {
      "type": "video",
      "name": "Video",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Video Title",
          "default": "Video Title"
        },
        {
          "type": "video_url",
          "id": "video_url",
          "label": "Video URL",
          "accept": ["youtube", "vimeo"],
          "info": "YouTube or Vimeo video URL"
        },
        {
          "type": "text",
          "id": "video_file",
          "label": "Direct Video URL",
          "info": "Direct .mp4 video file URL (from Shopify Files or external CDN)"
        },
        {
          "type": "image_picker",
          "id": "poster_image",
          "label": "Poster Image",
          "info": "Fallback image if video not available"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Video Carousel",
      "blocks": [
        {
          "type": "video",
          "settings": {
            "title": "Crimson Red Print"
          }
        },
        {
          "type": "video",
          "settings": {
            "title": "Green Elegance"
          }
        },
        {
          "type": "video",
          "settings": {
            "title": "Blue Floral"
          }
        },
        {
          "type": "video",
          "settings": {
            "title": "Pink Pattern"
          }
        },
        {
          "type": "video",
          "settings": {
            "title": "Navy Design"
          }
        }
      ]
    }
  ]
}
{% endschema %}